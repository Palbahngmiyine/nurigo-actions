name: Build a container image and push to AWS ECR

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      STAGE:
        required: true
        type: string
      CUSTOM_ENV_NAME1:
        required: false
        type: string
      CUSTOM_ENV_VALUE1:
        required: false
        type: string
      DOCKERFILE:
        required: false
        type: string
        default: Default-dockerfile
      REPO_NAME:
        required: false
        type: string
      NODE_ENV:
        required: false
        type: string
        default: production
      START:
        required: false
        type: string
      DOCKER_EXTRA_CMD1:
        required: false
        type: string
      DOCKER_EXTRA_CMD2:
        required: false
        type: string
      DOCKER_EXTRA_CMD3:
        required: false
        type: string
      DOCKER_EXTRA_CMD4:
        required: false
        type: string
      DOCKER_EXTRA_CMD5:
        required: false
        type: string

    secrets:
      token:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

    outputs:
      IMAGE_URI:
        description: "Docker Image URI"
        value: ${{ jobs.build.outputs.IMAGE_URI }}

jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest 
    outputs:
      IMAGE_URI: ${{ steps.build-image.outputs.IMAGE_URI }}
    steps:
    - name: Checkout Actions
      uses: actions/checkout@v3
      with:
        repository: nurigo/actions

    - name: Checkout Source Codes
      env:
        REPO_NAME: ${{ inputs.REPO_NAME || inputs.SERVICE_NAME }}
      uses: actions/checkout@v3
      with:
        repository: nurigo/${{ env.REPO_NAME }}
        path: dest
        token: ${{ secrets.token }}

    - name: Write build-version
      env:
        BUILD_VERSION: ${{ inputs.STAGE }}-${{ github.run_id }}-${{ github.run_attempt }}
      run: |
        echo "${{ env.BUILD_VERSION }}" > dest/build-version

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.SERVICE_NAME }}
        IMAGE_TAG: ${{ inputs.STAGE }}-${{ github.run_id }}-${{ github.run_attempt }}
        DOCKERFILE: ${{ inputs.DOCKERFILE == 'Default-dockerfile' && 'Default-dockerfile' || format('dest/{0}', inputs.DOCKERFILE) }}
        STAGE: ${{ inputs.STAGE }}
        NODE_ENV: ${{ inputs.NODE_ENV }}
        SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
        CUSTOM_ENV_NAME1: ${{ inputs.CUSTOM_ENV_NAME1 }}
        CUSTOM_ENV_VALUE1: ${{ inputs.CUSTOM_ENV_VALUE1 }}
        START: ${{ inputs.START && inputs.START || (inputs.NODE_ENV == 'development' && 'start-dev' || 'start') }}
        EXTRA_CMD1: ${{ inputs.STAGE == 'testbed' && 'RUN yarn global add pm2' || '# NON EXTRA_CMD1' }}
        EXTRA_CMD2: ${{ inputs.STAGE == 'testbed' && 'RUN apt-get update' || '# NON EXTRA_CMD2' }}
        EXTRA_CMD3: ${{ inputs.STAGE == 'testbed' && 'RUN apt-get -y install vim' || '# NON EXTRA_CMD3' }}
        DOCKER_EXTRA_CMD1: ${{ inputs.DOCKER_EXTRA_CMD1 && inputs.DOCKER_EXTRA_CMD1 || '# NON DOCKER_EXTRA_CMD1' }}
        DOCKER_EXTRA_CMD2: ${{ inputs.DOCKER_EXTRA_CMD2 && inputs.DOCKER_EXTRA_CMD2 || '# NON DOCKER_EXTRA_CMD2' }}
        DOCKER_EXTRA_CMD3: ${{ inputs.DOCKER_EXTRA_CMD3 && inputs.DOCKER_EXTRA_CMD3 || '# NON DOCKER_EXTRA_CMD3' }}
        DOCKER_EXTRA_CMD4: ${{ inputs.DOCKER_EXTRA_CMD4 && inputs.DOCKER_EXTRA_CMD4 || '# NON DOCKER_EXTRA_CMD4' }}
        DOCKER_EXTRA_CMD5: ${{ inputs.DOCKER_EXTRA_CMD5 && inputs.DOCKER_EXTRA_CMD5 || '# NON DOCKER_EXTRA_CMD5' }}
      run: |
        # Build a docker container and push it to ECR 
        sed -i "s/#{START}/${{ env.START }}/g" ${{ env.DOCKERFILE }}
        sed -i "s/#{EXTRA_CMD1}/${{ env.EXTRA_CMD1 }}/g" ${{ env.DOCKERFILE }}
        sed -i "s/#{EXTRA_CMD2}/${{ env.EXTRA_CMD2 }}/g" ${{ env.DOCKERFILE }}
        sed -i "s/#{EXTRA_CMD3}/${{ env.EXTRA_CMD3 }}/g" ${{ env.DOCKERFILE }}
        sed -i "s/#{DOCKER_EXTRA_CMD1}/${{ env.DOCKER_EXTRA_CMD1 }}/g" ${{ env.DOCKERFILE }}
        sed -i "s/#{DOCKER_EXTRA_CMD2}/${{ env.DOCKER_EXTRA_CMD2 }}/g" ${{ env.DOCKERFILE }}
        sed -i "s/#{DOCKER_EXTRA_CMD3}/${{ env.DOCKER_EXTRA_CMD3 }}/g" ${{ env.DOCKERFILE }}
        sed -i "s/#{DOCKER_EXTRA_CMD4}/${{ env.DOCKER_EXTRA_CMD4 }}/g" ${{ env.DOCKERFILE }}
        sed -i "s/#{DOCKER_EXTRA_CMD5}/${{ env.DOCKER_EXTRA_CMD5 }}/g" ${{ env.DOCKERFILE }}
        cp probe.sh ./dest/probe.sh
        docker build -f $DOCKERFILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg SERVICE_NAME=${{ env.SERVICE_NAME }} --build-arg NODE_ENV=${{ env.NODE_ENV }} --build-arg STAGE=${{ env.STAGE }} --build-arg START=${{ env.START }} dest
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=IMAGE_URI::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Debug
      env:
        BUILD_VERSION: ${{ inputs.STAGE }}-${{ github.run_id }}-${{ github.run_attempt }}
      run: |
        mkdir artifact
        echo "${{ steps.build-image.outputs.IMAGE_URI }}" > artifact/${{ inputs.SERVICE_NAME }}-${{ inputs.STAGE }}-DockerImageURI.txt
        echo "Image URI is ${{ steps.build-image.outputs.IMAGE_URI }}"
        echo "$BUILD_VERSION" > artifact/${{ inputs.SERVICE_NAME }}-${{ inputs.STAGE }}-BuildVersion.txt
        echo "Image URI is ${{ steps.build-image.outputs.IMAGE_URI }}"

    - name: Store Image URI
      uses: actions/upload-artifact@v2
      with:
        name: Image-URI
        path: artifact
